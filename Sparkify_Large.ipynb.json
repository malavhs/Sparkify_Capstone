{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sparkify Project Workspace\n",
    "This workspace contains a tiny subset (128MB) of the full dataset available (12GB). Feel free to use this workspace to build your project, or to explore a smaller subset with Spark before deploying your cluster on the cloud. Instructions for setting up your Spark cluster is included in the last lesson of the Extracurricular Spark Course content.\n",
    "\n",
    "You can follow the steps below to guide your data analysis and model building portion of this project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import udf, isnan, when, count, col,trim\n",
    "from pyspark.sql.types import StringType\n",
    "from pyspark.sql.types import IntegerType\n",
    "from pyspark.sql.functions import desc\n",
    "from pyspark.sql.functions import asc\n",
    "from pyspark.sql.functions import sum as Fsum\n",
    "from tabulate import tabulate\n",
    "import datetime\n",
    "import pyspark\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from pyspark.sql import functions as f\n",
    "from pyspark.sql.functions import from_unixtime, countDistinct, avg, max, min, date_format, unix_timestamp, dayofweek\n",
    "from pyspark.sql import Window\n",
    "from pyspark.sql import types\n",
    "from pyspark.ml import Pipeline, PipelineModel\n",
    "from pyspark.ml.feature import Imputer, StringIndexer, StringIndexerModel, OneHotEncoder, VectorAssembler, MinMaxScaler\n",
    "from pyspark.ml.feature import StandardScaler, OneHotEncoderModel\n",
    "from pyspark.ml.feature import StringIndexer\n",
    "import threading\n",
    "from pyspark.ml.classification import GBTClassifier, RandomForestClassifier\n",
    "from pyspark.ml.tuning import ParamGridBuilder, CrossValidator\n",
    "from pyspark.ml.evaluation import BinaryClassificationEvaluator\n",
    "from pyspark.mllib.evaluation import MulticlassMetrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a Spark session\n",
    "spark = SparkSession \\\n",
    "    .builder \\\n",
    "    .appName(\"Sparkify\") \\\n",
    "    .getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(artist='Martin Orford', auth='Logged In', firstName='Joseph', gender='M', itemInSession=20, lastName='Morales', length=597.55057, level='free', location='Corpus Christi, TX', method='PUT', page='NextSong', registration=1532063507000, sessionId=292, song='Grand Designs', status=200, ts=1538352011000, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36\"', userId='293'),\n",
       " Row(artist=\"John Brown's Body\", auth='Logged In', firstName='Sawyer', gender='M', itemInSession=74, lastName='Larson', length=380.21179, level='free', location='Houston-The Woodlands-Sugar Land, TX', method='PUT', page='NextSong', registration=1538069638000, sessionId=97, song='Bulls', status=200, ts=1538352025000, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\"', userId='98'),\n",
       " Row(artist='Afroman', auth='Logged In', firstName='Maverick', gender='M', itemInSession=184, lastName='Santiago', length=202.37016, level='paid', location='Orlando-Kissimmee-Sanford, FL', method='PUT', page='NextSong', registration=1535953455000, sessionId=178, song='Because I Got High', status=200, ts=1538352118000, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\"', userId='179'),\n",
       " Row(artist=None, auth='Logged In', firstName='Maverick', gender='M', itemInSession=185, lastName='Santiago', length=None, level='paid', location='Orlando-Kissimmee-Sanford, FL', method='PUT', page='Logout', registration=1535953455000, sessionId=178, song=None, status=307, ts=1538352119000, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\"', userId='179'),\n",
       " Row(artist='Lily Allen', auth='Logged In', firstName='Gianna', gender='F', itemInSession=22, lastName='Campos', length=194.53342, level='paid', location='Mobile, AL', method='PUT', page='NextSong', registration=1535931018000, sessionId=245, song='Smile (Radio Edit)', status=200, ts=1538352124000, userAgent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20100101 Firefox/31.0', userId='246')]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "import ibmos2spark\n",
    "# @hidden_cell\n",
    "credentials = {\n",
    "    'endpoint': 'https://s3-api.us-geo.objectstorage.service.networklayer.com',\n",
    "    'service_id': 'iam-ServiceId-4b5c4f5f-1526-415f-a000-8c078168d42e',\n",
    "    'iam_service_endpoint': 'https://iam.cloud.ibm.com/oidc/token',\n",
    "    'api_key': 'CIbP7Y5L52DAfe_Abrzr2pqXxd5TvXM8yNkr9OYcX8UM'\n",
    "}\n",
    "\n",
    "configuration_name = 'os_62cafdb4eb294897a148f87b5e2078be_configs'\n",
    "cos = ibmos2spark.CloudObjectStorage(sc, credentials, configuration_name, 'bluemix_cos')\n",
    "\n",
    "from pyspark.sql import SparkSession\n",
    "spark = SparkSession.builder.getOrCreate()\n",
    "# Since JSON data can be semi-structured and contain additional metadata, it is possible that you might face issues with the DataFrame layout.\n",
    "# Please read the documentation of 'SparkSession.read()' to learn more about the possibilities to adjust the data loading.\n",
    "# PySpark documentation: http://spark.apache.org/docs/2.0.2/api/python/pyspark.sql.html#pyspark.sql.DataFrameReader.json\n",
    "\n",
    "df = spark.read.json(cos.url('medium-sparkify-event-data.json', 'sparkly-donotdelete-pr-sqlldrhf7nldiu'))\n",
    "df.take(5)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- artist: string (nullable = true)\n",
      " |-- auth: string (nullable = true)\n",
      " |-- firstName: string (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- itemInSession: long (nullable = true)\n",
      " |-- lastName: string (nullable = true)\n",
      " |-- length: double (nullable = true)\n",
      " |-- level: string (nullable = true)\n",
      " |-- location: string (nullable = true)\n",
      " |-- method: string (nullable = true)\n",
      " |-- page: string (nullable = true)\n",
      " |-- registration: long (nullable = true)\n",
      " |-- sessionId: long (nullable = true)\n",
      " |-- song: string (nullable = true)\n",
      " |-- status: long (nullable = true)\n",
      " |-- ts: long (nullable = true)\n",
      " |-- userAgent: string (nullable = true)\n",
      " |-- userId: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print Schema\n",
    "df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Row(artist='Martin Orford', auth='Logged In', firstName='Joseph', gender='M', itemInSession=20, lastName='Morales', length=597.55057, level='free', location='Corpus Christi, TX', method='PUT', page='NextSong', registration=1532063507000, sessionId=292, song='Grand Designs', status=200, ts=1538352011000, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36\"', userId='293')]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Print first record for EDA\n",
    "df.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove empty User IDs\n",
    "df = df.filter(df.userId != '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def missing_perc(df, cols, nrows):\n",
    "    '''\n",
    "    INPUT:\n",
    "    df - (spark dataframe) df as defined at the top of the notebook \n",
    "    cols - (list) list of columns for which we want to check missing values\n",
    "    nrows - (int) count of number of rows in dataframe\n",
    "    \n",
    "    OUTPUT:\n",
    "    missing_df_perc - (pandas dataframe) Dataframe of number of missing values and percentages\n",
    "    '''\n",
    "    missing_df = df.select([count(when(isnan(c) | df[c].isNull() | (trim(df[c]) == ''), c)).alias(c) for c in cols])\n",
    "    missing_df_perc = spark.createDataFrame([(missing_df.columns[c], missing_df.collect()[0][c],\n",
    "                                                      round(float(missing_df.collect()[0][c]) / float(nrows) * 100, 6)) for\n",
    "                                                     c in range(len(cols))],\n",
    "                                                    [\"col_name\", \"missing_count\", \"missing_percen\"])\n",
    "    missing_df_perc = missing_df_perc.orderBy('missing_percen', ascending=False)\n",
    "    x = missing_df_perc.toPandas()\n",
    "    print(\"Missing count and percentages:\\n\" + tabulate(x, headers='keys', tablefmt='psql'))\n",
    "    return missing_df_perc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define columns and count rows\n",
    "ids = ['firstName','lastName','song']\n",
    "cols = ['userId','auth','gender','itemInSession','length','level','location','method','page','registration','sessionId','status','ts','userAgent','userId']\n",
    "nrows = df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing count and percentages:\n",
      "+----+---------------+-----------------+------------------+\n",
      "|    | col_name      |   missing_count |   missing_percen |\n",
      "|----+---------------+-----------------+------------------|\n",
      "|  0 | length        |           95128 |          18.0165 |\n",
      "|  1 | userId        |               0 |           0      |\n",
      "|  2 | auth          |               0 |           0      |\n",
      "|  3 | gender        |               0 |           0      |\n",
      "|  4 | itemInSession |               0 |           0      |\n",
      "|  5 | level         |               0 |           0      |\n",
      "|  6 | location      |               0 |           0      |\n",
      "|  7 | method        |               0 |           0      |\n",
      "|  8 | page          |               0 |           0      |\n",
      "|  9 | registration  |               0 |           0      |\n",
      "| 10 | sessionId     |               0 |           0      |\n",
      "| 11 | status        |               0 |           0      |\n",
      "| 12 | ts            |               0 |           0      |\n",
      "| 13 | userAgent     |               0 |           0      |\n",
      "| 14 | userId        |               0 |           0      |\n",
      "+----+---------------+-----------------+------------------+\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DataFrame[col_name: string, missing_count: bigint, missing_percen: double]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_perc(df,cols,nrows)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis\n",
    "When you're working with the full dataset, perform EDA by loading a small subset of the data and doing basic manipulations within Spark. In this workspace, you are already provided a small subset of data you can explore.\n",
    "\n",
    "### Define Churn\n",
    "\n",
    "Once you've done some preliminary analysis, create a column `Churn` to use as the label for your model. I suggest using the `Cancellation Confirmation` events to define your churn, which happen for both paid and free users. As a bonus task, you can also look into the `Downgrade` events.\n",
    "\n",
    "### Explore Data\n",
    "Once you've defined churn, perform some exploratory data analysis to observe the behavior for users who stayed vs users who churned. You can start by exploring aggregates on these two groups of users, observing how much of a specific action they experienced per a certain time unit or number of songs played."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating 'Churn' column\n",
    "df = df.withColumn('Churn', f.when(f.col('page') == 'Cancellation Confirmation', 1).otherwise(0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting up the window\n",
    "range_begin = Window.unboundedPreceding\n",
    "range_end = Window.unboundedFollowing\n",
    "window_users = Window.partitionBy(\"userId\").rangeBetween(range_begin, range_end)\n",
    "df = df.withColumn(\"Churn\",f.sum(\"Churn\").over(window_users))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+-----+\n",
      "|Churn|count|\n",
      "+-----+-----+\n",
      "|    0|  349|\n",
      "|    1|   99|\n",
      "+-----+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Count users who churned (1) v/s those who didn't (0)\n",
    "df.select('userId','Churn').distinct().groupBy('Churn').count().show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Churn w.r.t gender\n",
    "no_gender = df.select('userId','gender','Churn').distinct().groupBy('gender','Churn').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 402.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x = 'gender', y = 'count',hue = 'Churn', data = no_gender.toPandas(), kind = 'bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Churn w.r.t auth\n",
    "no_auth = df.select('userId','auth','Churn').distinct().groupBy('auth','Churn').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 402.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x = 'auth', y = 'count',hue = 'Churn', data = no_auth.toPandas(), kind = 'bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Churn w.r.t level\n",
    "no_level = df.select('userId','level','Churn').distinct().groupBy('level','Churn').count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 402.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x = 'level', y = 'count',hue = 'Churn', data = no_level.toPandas(), kind = 'bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split location column into city and state\n",
    "split_col = pyspark.sql.functions.split(df['location'], ',')\n",
    "df = df.withColumn('user_city',split_col.getItem(0))\n",
    "no_city = df.select('userId','user_city').distinct().groupBy('user_city').count().orderBy('count', ascending = False)\n",
    "df = df.withColumn('user_state',split_col.getItem(1))\n",
    "no_loc = df.select('userId','user_state').distinct().groupBy('user_state').count().orderBy('count', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Top 10 States')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x = 'user_state', y = 'count', data = no_loc.toPandas().head(10));\n",
    "plt.xticks(rotation=90)\n",
    "plt.title('Top 10 States')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Top 15 cities')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x = 'user_city', y = 'count', data = no_city.toPandas().head(15));\n",
    "plt.xticks(rotation=90)\n",
    "plt.title('Top 15 cities')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Churn w.r.t State\n",
    "state_churn = df.select('userId','user_state','Churn').distinct().groupBy('user_state','Churn').count().orderBy('user_state','count', ascending = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 402.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(y = 'user_state', x = 'count',hue = 'Churn', data = state_churn.toPandas().head(10), kind = 'bar', orient = \"h\");\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create new columns based on timestamp column\n",
    "df = df.withColumn(\"Hour_of_day\", from_unixtime(\"ts\", \"HH\"))\n",
    "df = df.withColumn('day_of_month',(from_unixtime(\"ts\", \"dd\")))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop columns that are unnecessary\n",
    "df = df.drop('firstName','lastName','method','status','registration','auth', 'location')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- artist: string (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- itemInSession: long (nullable = true)\n",
      " |-- length: double (nullable = true)\n",
      " |-- level: string (nullable = true)\n",
      " |-- page: string (nullable = true)\n",
      " |-- sessionId: long (nullable = true)\n",
      " |-- song: string (nullable = true)\n",
      " |-- ts: long (nullable = true)\n",
      " |-- userAgent: string (nullable = true)\n",
      " |-- userId: string (nullable = true)\n",
      " |-- Churn: long (nullable = true)\n",
      " |-- user_city: string (nullable = true)\n",
      " |-- user_state: string (nullable = true)\n",
      " |-- Hour_of_day: string (nullable = true)\n",
      " |-- day_of_month: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print updated schema\n",
    "df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouping Users by Session Id and Churn\n",
    "unique_sessions_by_id = ((df.groupBy('userId','Churn').agg(countDistinct('sessionId')).orderBy('userId')).toPandas())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x119b1a9d0>,\n",
       "       <matplotlib.axes._subplots.AxesSubplot object at 0x119cbbe80>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAEKCAYAAAAfGVI8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAWHUlEQVR4nO3df7BkZZ3f8ffHAX+BPyAMLDsDe1mD7iKJgzthTahkiahMFkt0q0wg0WIN7pgEdjExpaNulbq1pGZrVbJVWa0CIUwZF4soxlkxLBQrUqYUHBCQYfi1MOIIzIwaEYiFDn7zR5/B5np/zNzuvuf0nPer6lZ3P+ec218ufebTzznPeU6qCklSfz2n7QIkSe0yCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNgSiQ5PMkXkjyZ5DtJ/nXbNUltSHJ+ki1Jnkpyedv1HAgOarsA7bO/BH4KHAWsAa5OcntVbW23LGnZPQz8KXA68IKWazkgxCuLuy/JIcD/BU6sqnubtk8D36uqDa0WJ7UkyZ8Cq6vq99uuZdp5aGg6vBx4em8ING4HXtlSPZIOIAbBdDgUeGxW22PAi1qoRdIBxiCYDk8AL57V9mLg8RZqkXSAMQimw73AQUmOH2p7FeCJYkkjMwimQFU9CVwF/EmSQ5KcApwJfLrdyqTll+SgJM8HVgArkjw/iSMgR2AQTI//wGCo3C7gCuDfO3RUPfXHwE+ADcDbmud/3GpFU87ho5LUc/YIJKnnDAJJ6rlFgyDJZUl2JblzjmX/OUklOWKo7f1J7k9yT5LTx12wJGm89qVHcDmwbnZjkmOA1wMPDbWdAJzF4IrXdcAnkqwYS6WSpIlYNAiq6kbgh3Msugh4LzB8tvlM4LNV9VRVPQjcD5w8jkIlSZOxpLG3Sd7EYMKz25MML1oFfGPo9Y6mbUFHHHFEzczMLKUUaUG33HLL96tqZdt17A/3B03CQvvCfgdBkhcCHwTeMNfiOdrmHJ+aZD2wHuDYY49ly5Yt+1uKtKgk32m7hv01MzPj/qCxW2hfWMqooZcBxwG3J9kOrAZuTfIrDHoAxwytu5rB3OG/pKourqq1VbV25cqp+sImSQeU/Q6Cqvp2VR1ZVTNVNcPgH/9XV9WjwGbgrCTPS3IccDxw81grliSN1b4MH70C+DrwiiQ7kpw737rNlAdXAncB1wDnVdXT4ypWkjR+i54jqKqzF1k+M+v1hcCFo5UlSVouXlksST1nEEhSzxkEktRzBoEk9Vzn7+ozs+HqRdfZvvGMZahEate+7Avg/qD9Z49AknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCaQySPD/JzUluT7I1yUea9g8n+V6S25qf3227Vmm2zl9QJk2Jp4DXVtUTSQ4GvpbkfzfLLqqqj7ZYm7Qgg0Aag6oq4Inm5cHNz5y3aZW6xkND0pgkWZHkNmAXcF1V3dQsOj/JHUkuS3LYPNuuT7IlyZbdu3cvW80SGATS2FTV01W1hsG9uk9OciLwSQb3+V4DPAJ8bJ5tvYe3WmMQSGNWVT8CbgDWVdXOJiB+DlwCnNxqcdIcDAJpDJKsTPLS5vkLgNcBdyc5emi1twB3tlGftBBPFkvjcTSwKckKBl+wrqyqLyX5dJI1DE4cbwfe1WKN0pwMAmkMquoO4KQ52t/eQjnSfvHQkCT13KJB0Ax525XkzqG2P09ydzMk7gt7j402y96f5P4k9yQ5fVKFS5LGY196BJcD62a1XQecWFX/ELgXeD9AkhOAs4BXNtt8ojlmKknqqEWDoKpuBH44q+3aqtrTvPwGg3HTAGcCn62qp6rqQeB+HC4nSZ02jnME/xbYO6fKKuC7Q8t2NG2SpI4aKQiSfBDYA3xmb9Mcq80534qX1EtSNyw5CJKcA7wR+DfNhFsw6AEcM7TaauDhubb3knpJ6oYlBUGSdcD7gDdV1f8bWrQZOCvJ85IcBxwP3Dx6mZKkSVn0grIkVwCnAkck2QF8iMEooecB1yUB+EZV/buq2prkSuAuBoeMzquqpydVvCRpdIsGQVWdPUfzpQusfyFw4ShFSZKWj1cWS1LPGQSS1HMGgST1nEEgST1nEEhSzxkEktRzBoEk9ZxBIEk9ZxBIY5Dk+UluTnJ7kq1JPtK0H57kuiT3NY+HtV2rNJtBII3HU8Brq+pVwBpgXZLXABuA66vqeOD65rXUKQaBNAY18ETz8uDmpxjcrGlT074JeHML5UkLMgikMUmyIsltwC7guqq6CTiqqh4BaB6PbLNGaS4GgTQmVfV0Va1hcB+Ok5OcuK/beqMmtckgkMasqn4E3ACsA3YmORqgedw1zzbeqEmtMQikMUiyMslLm+cvAF4H3M3gZk3nNKudA3yxnQql+S16PwJJ++RoYFOSFQy+YF1ZVV9K8nXgyiTnAg8Bb22zSGkuBoE0BlV1B3DSHO0/AE5b/oqkfeehIUnqOYNAknrOIJCknjMIJKnnDAJJ6rlFgyDJZUl2JblzqG3eGRWTvD/J/UnuSXL6pAqXJI3HvvQILmdwheSwOWdUTHICcBbwymabTzTjqiVJHbVoEFTVjcAPZzXPN6PimcBnq+qpqnoQuB84eUy1SpImYKnnCOabUXEV8N2h9XY0bZKkjhr3yeLM0VZzruhsi5LUCUsNgvlmVNwBHDO03mrg4bl+gbMtSlI3LDUI5ptRcTNwVpLnJTkOOB64ebQSJUmTtOikc0muAE4FjkiyA/gQsJE5ZlSsqq1JrgTuAvYA51XV0xOqXZI0BosGQVWdPc+iOWdUrKoLgQtHKUqStHy8sliSes4gkKSeMwgkqecMAknqOYNAknrOIJDGIMkxSb6SZFuSrUkuaNo/nOR7SW5rfn637Vql2bx5vTQee4D3VNWtSV4E3JLkumbZRVX10RZrkxZkEEhj0Ey+uHcixseTbMMJFzUlPDQkjVmSGeAk4Kam6fwkdzQ3eTps3g2llhgE0hglORT4PPDuqvox8EngZcAaBj2Gj82znbPxqjUGgTQmSQ5mEAKfqaqrAKpqZ1U9XVU/By5hnhs1ORuv2mQQSGOQJMClwLaq+vhQ+9FDq70FuHP2tlLbPFksjccpwNuBbye5rWn7AHB2kjUMbtC0HXhXO+VJ8zMIpDGoqq8x9x36vrzctUj7y0NDktRz9gikA8zMhqsXXWf7xjOWoRJNC3sEktRzBoEk9ZxBIEk9ZxBIUs8ZBJLUcyMFQZL/2My9fmeSK5I8P8nhSa5Lcl/z6CRbktRhSw6CJKuAPwLWVtWJwArgLGADcH1VHQ9c37yWJHXUqIeGDgJekOQg4IXAw8CZwKZm+SbgzSO+hyRpgpYcBFX1PeCjwEMMptd9rKquBY5qbtKx92YdR46jUEnSZIxyaOgwBt/+jwN+FTgkydv2Y3vnX5ekDhjl0NDrgAerandV/Qy4CvgnwM69U+82j7vm2tj51yWpG0aZa+gh4DVJXgj8BDgN2AI8CZwDbGwevzhqkYtxbhVJWrolB0FV3ZTkc8CtwB7gW8DFwKHAlUnOZRAWbx1HoZKkyRhp9tGq+hDwoVnNTzHoHUiSpoBXFktSzxkEktRzBoEk9ZxBII1BkmOSfCXJtmb+rQuadufeUucZBNJ47AHeU1W/CbwGOC/JCTj3lqaAQSCNQVU9UlW3Ns8fB7YBq3DuLU0Bg0AasyQzwEnATTj3lqaAQSCNUZJDgc8D766qH+/Hds69pdYYBNKYJDmYQQh8pqquapqde0udZxBIY5AkwKXAtqr6+NCizQzm3IJlmntL2l8jTTEh6RmnAG8Hvp3ktqbtAwwmX3TuLXWaQSCNQVV9Dcg8i517S53moSFJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqecMAknqOYNAknpupCBI8tIkn0tyd3OLvn/srfkkabqM2iP4C+CaqvoN4FUM7srkrfkkaYosOQiSvBj4Zwym3qWqflpVP8Jb80nSVBmlR/DrwG7gvyf5VpJPJTkEb80nSVNllCA4CHg18MmqOgl4kv04DOSt+SSpG0YJgh3Ajqq6qXn9OQbB4K35JGmKLDkIqupR4LtJXtE0nQbchbfmk6SpMuodyv4Q+EyS5wIPAO9gEC7emk+SpsRIQVBVtwFr51jkrfkkaUr05p7FMxuuXnSd7RvPWIZKdCBKchnwRmBXVZ3YtH0Y+AMGo+sAPlBVX26nQml+TjEhjcflwLo52i+qqjXNjyGgTjIIpDGoqhuBH7Zdh7QUBoE0WecnuSPJZc67pa4yCKTJ+STwMmAN8AjwsflW9AJLtckgkCakqnZW1dNV9XPgEuDkBdb1Aku1xiCQJmTvFfaNtwB3tlWLtJDeDB+VJinJFcCpwBFJdgAfAk5NsgYoYDvwrtYKlBZgEEhjUFVnz9F86bIXIi2Bh4YkqecMAknqOYNAknrOIJCknjMIJKnnDAJJ6jmDQJJ6ziCQpJ4zCCSp5wwCSeo5g0CSes4gkKSeMwgkqedGDoIkK5J8K8mXmteHJ7kuyX3No7fnk6QOG0eP4AJg29DrDcD1VXU8cH3zWpLUUSMFQZLVwBnAp4aazwQ2Nc83AW8e5T0kSZM1ao/gvwLvBX4+1HZUVT0C0DweOeJ7SJImaMlBkOSNwK6qumWJ269PsiXJlt27dy+1DEnSiEbpEZwCvCnJduCzwGuT/A9g596bdjePu+bauKourqq1VbV25cqVI5QhSRrFkoOgqt5fVauragY4C/jbqnobsBk4p1ntHOCLI1cpdVySy5LsSnLnUJsj6DQVJnEdwUbg9UnuA17fvJYOdJcD62a1OYJOU+GgcfySqroBuKF5/gPgtHH8XmlaVNWNSWZmNZ8JnNo838RgH3nfshUl7aOxBIGkOT1rBF2SeUfQJVkPrAc49thjl6m8hc1suHrRdbZvPGMZKtGkOcWE1AEOnlCb7BEM2ZdvQOC3IO2znUmObnoD846gk9pmj0CaHEfQaSoYBNIYJLkC+DrwiiQ7kpyLI+g0JTw0JI1BVZ09zyJH0KnzDAKph/b1fJj6wUNDktRzBoEk9ZxBIEk9ZxBIUs8ZBJLUcwaBJPWcQSBJPWcQSFLPGQSS1HMGgST1nEEgST1nEEhSzxkEktRzBoEk9dySgyDJMUm+kmRbkq1JLmjaD09yXZL7msfDxleuJGncRukR7AHeU1W/CbwGOC/JCcAG4PqqOh64vnktSeqoJQdBVT1SVbc2zx8HtgGrgDOBTc1qm4A3j1qkJGlyxnKHsiQzwEnATcBRVfUIDMIiyZHjeA9pWiXZDjwOPA3sqaq17VYkPdvIQZDkUODzwLur6sdJ9nW79cB6gGOPPXbUMqSu++dV9f22i5DmMtKooSQHMwiBz1TVVU3zziRHN8uPBnbNtW1VXVxVa6tq7cqVK0cpQ5I0glFGDQW4FNhWVR8fWrQZOKd5fg7wxaWXJx0QCrg2yS1NT1jqlFEODZ0CvB34dpLbmrYPABuBK5OcCzwEvHW0EqWpd0pVPdycL7suyd1VdePwCtN6qHRmw9Vj+T3bN54xlt+jpVlyEFTV14D5TgicttTfKx1oqurh5nFXki8AJwM3zlrnYuBigLVr19ayF6leG8uoob7Zl29BfsMRQJJDgOdU1ePN8zcAf9JyWdKzGATSZB0FfKEZTXcQ8FdVdU27JUnPZhBIE1RVDwCvarsOaSFOOidJPWcQSFLPGQSS1HMGgST1nEEgST1nEEhSzzl8VFLrvEizXfYIJKnnDAJJ6jkPDU2IXV1J08IegST1nEEgST3noSFJU2FaD7dOQ932CCSp5wwCSeo5Dw21aBq6jJIOfPYIJKnn7BFIOmAcyL3sSf63GQQHgH35gOyLad1BJI1mYoeGkqxLck+S+5NsmNT7SF3nvqCum0iPIMkK4C+B1wM7gG8m2VxVd03i/Q5k4/q2Py7L3fWe9q6++4KmwaR6BCcD91fVA1X1U+CzwJkTei+py9wX1HmTOkewCvju0OsdwG9P6L00Jl3rfRwg3BfUeZMKgszRVs9aIVkPrG9ePpHknjm2OQL4/phrG1UXa4IO1ZU/e+bpstQ09H5z+bVJv/8iFt0XYNH9oTP/bxfQ9RqfqW+Rz0sr8mfj+fstdV+YVBDsAI4Zer0aeHh4haq6GLh4oV+SZEtVrR1/eUvXxZqgm3V1saYWLLovwML7wzT8Hbteo/UtbFLnCL4JHJ/kuCTPBc4CNk/ovaQuc19Q502kR1BVe5KcD/wNsAK4rKq2TuK9pC5zX9A0mNgFZVX1ZeDLI/6aBQ8dtaSLNUE36+piTctuDPvCNPwdu16j9S0gVb903kqS1CNOOidJPWcQSFLPGQSS1HOdmX00yW8wuPR+FYMLbh4GNlfVtlYLk5aZ+4KWWyd6BEnex2AOlgA3Mxh7HeCKNmdrTLJu6PlLklya5I4kf5XkqBbrekmSjUnuTvKD5mdb0/bSlmrq5N9q2nR1X9iri5+9aaoPulljJ0YNJbkXeGVV/WxW+3OBrVV1fEt13VpVr26efwp4FLgE+D3gd6rqzS3V9TfA3wKbqurRpu1XgHOA11XV61uoqZN/q2nT1X1hqI7Offamqb6mns7V2JUguBs4vaq+M6v914Brq+oVLdU1/I/bbVW1ZmjZs14vc133zPc3WWjZhGvq5N9q2nR1Xxiqo3OfvX2toQv1LVZHWzV25RzBu4Hrk9zHL2ZqPBb4+8D5rVUFRyb5Twy65i9OkvpFcrZ5WO07Sd7L4BvFToDm8Mvv8+yZLpdTV/9W06ar+8JeXfzsDet6fdDBGjsRBFV1TZKXM5i7fRWDf0x2AN+sqqdbLO0S4EXN800MZjDc3XTjbmutKvhXwAbgq80HqICdDOaw+Zct1dTVv9VU6fC+sFcXP3vDZtcHg8OUf0036oMO/g07cWioy5oRHKuAm6rqiaH2dVV1TXuV/UKSf8rgH45vV9W1LdXwR8AXqqor37o0Ic0+sRr4Rlf3iWFJPl1Vb2+7jr2S/DZwd1U9luSFDELh1cBW4L9U1WPLXpNBML8kf8igO74NWANcUFVfbJY9c0y8hbpurqqTm+fvBM4D/hfwBuCvq2pjCzU9BjwJ/B1wBfA/q2r3ctehyWoC/zw6tk8M1TfXzK6vZXBylqp60/JW9MuSbAVe1UxIeDGD/ebzwGlN++8td02dODTUYeuB36qqJ5LMAJ9LMlNVf8HcNxxZLgcPPX8X8Iaq2p3ko8A3gGUPAuAB4LeA1zHo+n4kyS0MQuGqqnq8hZo0fn9AN/eJvVYDdwGfYnDIJcA/Aj7WZlGzPKeq9jTP1w6F59eStHIY1ZN4C1uxt+tbVduBU4F/keTjtPuhf06Sw5L8PQa9ut0AVfUksGfhTSemqurnVXVtVZ0L/CrwCWAdg5DQgaGr+8Rea4FbgA8Cj1XVDcBPquqrVfXVViv7hTuTvKN5fnuStQDNuaGfzb/Z5BgEC3s0yTPDHpsd4I0MToT+g9aqgpcw+LBvAQ5vTsiS5FDa2xmf9b5V9bOq2lxVZzMY9aIDQ1f3CQCaLyMXAe8APpjkv9G9Ix/vBH4nyd8BJwBfT/IAgwEX72yjIM8RLCDJamDP3os+Zi07par+Twtlzas58XRUVT3Ywnu/vKruXe731fKawn3iDOCUqvpA27XMluRFwK8zCKode4eStlKLQSBJ/eahIUnqOYNAknrOIJCknjMIJKnnDAJJ6rn/Dwll5PLdm5NDAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "unique_sessions_by_id['count(sessionId)'].hist(by =  unique_sessions_by_id['Churn'], bins = 15 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouping Users by Average Song Length and Churn\n",
    "avg_length_songs_by_id = ((df.groupBy('userId','Churn').agg(avg('length')).orderBy('userId')).toPandas())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x119a9e5b0>,\n",
       "       <matplotlib.axes._subplots.AxesSubplot object at 0x119a876d0>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "avg_length_songs_by_id['avg(length)'].hist(by =  avg_length_songs_by_id['Churn'], bins = 15 )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Non Churners seem to be listening more as seen in the histograms above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouping Users by Hour of Day and Churn\n",
    "hh_churn = df.groupBy('Hour_of_day','Churn').count().orderBy('Hour_of_day')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouping Users by Day of Month and Churn\n",
    "dom_churn = df.groupBy('day_of_month','Churn').count().orderBy('day_of_month')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABJ8AAAHhCAYAAADAnR9nAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3df5SldX0n+PdHGoEYMUo3GaBgGhFNgJnphJY1G3WMZiMSFzCrSbMmYDCLshoxs8mMTvYomxxyYhLjGePELA4G8QfoiAayq44M/lozCjZK5HdslUAJIqJJSDKQdPvdP+opUjT3Vld317fuvc3rdc49de/3Ps9T73uprm/z7u/z3GqtBQAAAAB6eMykAwAAAACw71I+AQAAANCN8gkAAACAbpRPAAAAAHSjfAIAAACgG+UTAAAAAN2sm3SAtbZ+/fq2cePGSccAAAAA2Gdcd911326tbRj13KOufNq4cWO2bt066RgAAAAA+4yq+stxzzntDgAAAIBulE8AAAAAdKN8AgAAAKCbR901nwAAAACm0T/+4z9mfn4+DzzwwKSjjHXggQdmbm4u+++//4r3UT4BAAAATIH5+fk8/vGPz8aNG1NVk47zCK213HfffZmfn8/RRx+94v2cdgcAAAAwBR544IEccsghU1k8JUlV5ZBDDtntlVnKJwAAAIApMa3F06I9yad8AgAAAJhy3/zmN7Nly5Ycc8wxOe6443LKKafkwgsvzAtf+MJJR9sl5RMAAADAFGut5UUvelGe85zn5Ktf/Wpuvvnm/NZv/VbuueeevTru9u3bVynh8lxwHAAAAGCKffKTn8z++++fV77ylQ+Nbdq0KX/1V3+Vq6++Oi9+8Ytz44035sQTT8x73vOeVFU2btyYrVu3Zv369dm6dWt+9Vd/NZ/61Kdy/vnn56677srtt9+e9evX56lPfWruuOOOfO1rX8sdd9yR1772tXnNa16zqvmVTwAAAABTbLFYGuVLX/pSbrrpphx++OH58R//8fzZn/1ZnvnMZy57vOuuuy6f/exnc9BBB+X888/Prbfemk9+8pO5//7787SnPS3nnntu9t9//1XL77Q7AAAAgBl10kknZW5uLo95zGOyadOm3H777bvc59RTT81BBx300OOf/umfzgEHHJD169fn0EMP3evT+XamfAIAAACY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\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,8))\n",
    "sns.barplot(x = 'Hour_of_day', y = 'count', hue = 'Churn', data = hh_churn.toPandas());"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,8))\n",
    "sns.barplot(x = 'day_of_month', y = 'count', hue = 'Churn', data = dom_churn.toPandas());"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouping Users by Unique Artists and Churn\n",
    "unique_artist_by_id = ((df.groupBy('userId','Churn').agg(countDistinct('artist')).orderBy('userId')).toPandas())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x1197e56a0>,\n",
       "       <matplotlib.axes._subplots.AxesSubplot object at 0x11a68c9a0>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "unique_artist_by_id['count(artist)'].hist(by =  unique_artist_by_id['Churn'] )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Churners (1) tend to listen to fewer artists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouping Users by Unique songs and Churn\n",
    "unique_songs_by_id = ((df.groupBy('userId','Churn').agg(countDistinct('song')).orderBy('userId')).toPandas())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([<matplotlib.axes._subplots.AxesSubplot object at 0x11a709970>,\n",
       "       <matplotlib.axes._subplots.AxesSubplot object at 0x11a74acd0>],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "unique_songs_by_id['count(song)'].hist(by =  unique_songs_by_id['Churn'] )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No surprises when Churners (1) tend to listen to fewer songs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Grouping Users by Type of Page and Churn\n",
    "page_churn = df.groupBy('page', 'Churn').count().orderBy('count', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,10))\n",
    "sns.barplot(x = 'count', y = 'page', hue = 'Churn', data = page_churn.toPandas(), orient='h');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting userAent to get Device Type\n",
    "df = df.withColumn(\"_tmp\", pyspark.sql.functions.split(\"userAgent\", \"\\\\;\").getItem(0))\n",
    "df = df.withColumn(\"tmp2\", pyspark.sql.functions.split(\"_tmp\", \"\\\\(\").getItem(1))\n",
    "df = df.withColumn(\"device_type\", pyspark.sql.functions.split(\"tmp2\", \"\\\\)\").getItem(0))\n",
    "df = df.drop('_tmp', 'tmp2', 'userAgent')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "device_churn =  df.groupBy('device_type', 'Churn').count().orderBy('count', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "sns.barplot(x = 'count', y = 'device_type', hue = 'Churn', data = device_churn.toPandas(), orient='h');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Feature Engineering\n",
    "Once you've familiarized yourself with the data, build out the features you find promising to train your model on. To work with the full dataset, you can follow the following steps.\n",
    "- Write a script to extract the necessary features from the smaller subset of data\n",
    "- Ensure that your script is scalable, using the best practices discussed in Lesson 3\n",
    "- Try your script on the full data set, debugging your script if necessary\n",
    "\n",
    "If you are working in the classroom workspace, you can just extract features based on the small subset of data contained here. Be sure to transfer over this work to the larger dataset when you work on your Spark cluster."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The features that I am creating include:\n",
    "\n",
    "    1. No of unique sessions per user\n",
    "    2. Activity during AM Hours\n",
    "    3. Activity during PM Hours\n",
    "    4. Average song length\n",
    "    5. Longest session by the user\n",
    "    6. User State\n",
    "    7. User City\n",
    "    8. No. of Next Song events\n",
    "    9. No. of Thumbs up counts\n",
    "    10. No of Thumbs Down counts\n",
    "    11. No of Playlist added events\n",
    "    12. No of friend added events\n",
    "    13. Downgrade evnts per user\n",
    "    14. Acivity during first half of the month\n",
    "    15. Activity during second half of the month\n",
    "    16. Home Click count\n",
    "    17. Type of Device"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- artist: string (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- itemInSession: long (nullable = true)\n",
      " |-- length: double (nullable = true)\n",
      " |-- level: string (nullable = true)\n",
      " |-- page: string (nullable = true)\n",
      " |-- sessionId: long (nullable = true)\n",
      " |-- song: string (nullable = true)\n",
      " |-- ts: long (nullable = true)\n",
      " |-- userId: string (nullable = true)\n",
      " |-- Churn: long (nullable = true)\n",
      " |-- user_city: string (nullable = true)\n",
      " |-- user_state: string (nullable = true)\n",
      " |-- Hour_of_day: string (nullable = true)\n",
      " |-- day_of_month: string (nullable = true)\n",
      " |-- device_type: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print Schema\n",
    "df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Engineering new features as defined above\n",
    "\n",
    "final_df = ((df.groupBy('userId','Churn','gender','user_city','user_state', 'device_type')\n",
    "       .agg(countDistinct('sessionId').alias('unique_sess'),\n",
    "        count(when(col(\"Hour_of_day\") >= 12,1)).alias('PM_count'),\n",
    "        count(when(col(\"Hour_of_day\") < 12,1)).alias('AM_count'),\n",
    "        count(when(col(\"day_of_month\") < 15,1)).alias('first_half_month'),\n",
    "        count(when(col(\"day_of_month\") >= 15,1)).alias('second_half_month'),\n",
    "        avg('length').alias('avg_song_length'), \n",
    "        max('itemInSession').alias('longest_sess'),\n",
    "        count(when(col(\"page\") == 'NextSong',1)).alias('next_song_count'),\n",
    "        count(when(col(\"page\") == 'Thumbs Up',1)).alias('thumbs_up_count'),\n",
    "        count(when(col(\"page\") == 'Thumbs Down',1)).alias('thumbs_down_count'),\n",
    "        count(when(col(\"page\") == 'Add to Playlist',1)).alias('playlist_added_count'),\n",
    "        count(when(col(\"page\") == 'Add Friend',1)).alias('friend_added_count'),\n",
    "        count(when(col(\"page\") == 'Downgrade',1)).alias('Downgrade_count'),\n",
    "        count(when(col(\"page\") == 'Home',1)).alias('home_click_count'),\n",
    "        count(when(col(\"page\") == 'Roll Advert',1)).alias('roll_advert_count'),\n",
    "        )\n",
    "       .orderBy('userId')))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- userId: string (nullable = true)\n",
      " |-- Churn: long (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- user_city: string (nullable = true)\n",
      " |-- user_state: string (nullable = true)\n",
      " |-- device_type: string (nullable = true)\n",
      " |-- unique_sess: long (nullable = false)\n",
      " |-- PM_count: long (nullable = false)\n",
      " |-- AM_count: long (nullable = false)\n",
      " |-- first_half_month: long (nullable = false)\n",
      " |-- second_half_month: long (nullable = false)\n",
      " |-- avg_song_length: double (nullable = true)\n",
      " |-- longest_sess: long (nullable = true)\n",
      " |-- next_song_count: long (nullable = false)\n",
      " |-- thumbs_up_count: long (nullable = false)\n",
      " |-- thumbs_down_count: long (nullable = false)\n",
      " |-- playlist_added_count: long (nullable = false)\n",
      " |-- friend_added_count: long (nullable = false)\n",
      " |-- Downgrade_count: long (nullable = false)\n",
      " |-- home_click_count: long (nullable = false)\n",
      " |-- roll_advert_count: long (nullable = false)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print Schema for new features\n",
    "final_df.printSchema()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling\n",
    "Split the full dataset into train, test, and validation sets. Test out several of the machine learning methods you learned. Evaluate the accuracy of the various models, tuning parameters as necessary. Determine your winning model based on test accuracy and report results on the validation set. Since the churned users are a fairly small subset, I suggest using F1 score as the metric to optimize."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Counting no of rows(users)\n",
    "cols_final = list(final_df.columns)\n",
    "cols_count = final_df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing count and percentages:\n",
      "+----+----------------------+-----------------+------------------+\n",
      "|    | col_name             |   missing_count |   missing_percen |\n",
      "|----+----------------------+-----------------+------------------|\n",
      "|  0 | userId               |               0 |                0 |\n",
      "|  1 | Churn                |               0 |                0 |\n",
      "|  2 | gender               |               0 |                0 |\n",
      "|  3 | user_city            |               0 |                0 |\n",
      "|  4 | user_state           |               0 |                0 |\n",
      "|  5 | device_type          |               0 |                0 |\n",
      "|  6 | unique_sess          |               0 |                0 |\n",
      "|  7 | PM_count             |               0 |                0 |\n",
      "|  8 | AM_count             |               0 |                0 |\n",
      "|  9 | first_half_month     |               0 |                0 |\n",
      "| 10 | second_half_month    |               0 |                0 |\n",
      "| 11 | avg_song_length      |               0 |                0 |\n",
      "| 12 | longest_sess         |               0 |                0 |\n",
      "| 13 | next_song_count      |               0 |                0 |\n",
      "| 14 | thumbs_up_count      |               0 |                0 |\n",
      "| 15 | thumbs_down_count    |               0 |                0 |\n",
      "| 16 | playlist_added_count |               0 |                0 |\n",
      "| 17 | friend_added_count   |               0 |                0 |\n",
      "| 18 | Downgrade_count      |               0 |                0 |\n",
      "| 19 | home_click_count     |               0 |                0 |\n",
      "| 20 | roll_advert_count    |               0 |                0 |\n",
      "+----+----------------------+-----------------+------------------+\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DataFrame[col_name: string, missing_count: bigint, missing_percen: double]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking missing values for new dataframe\n",
    "missing_perc(final_df, cols_final, cols_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting up various columns\n",
    "id_cols = ['userId']\n",
    "cat_cols = ['gender','user_city','user_state']\n",
    "num_cols = ['unique_sess','PM_count','AM_count','first_half_month','second_half_month','avg_song_length',\n",
    "           'longest_sess','next_song_count','thumbs_up_count','thumbs_down_count','playlist_added_count',\n",
    "           'friend_added_count','Downgrade_count','home_click_count','roll_advert_count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting column datatypes to Double\n",
    "for col in num_cols + ['Churn']:\n",
    "    final_df = final_df.withColumn(col, final_df[col].cast(types.DoubleType()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- userId: string (nullable = true)\n",
      " |-- Churn: double (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- user_city: string (nullable = true)\n",
      " |-- user_state: string (nullable = true)\n",
      " |-- device_type: string (nullable = true)\n",
      " |-- unique_sess: double (nullable = false)\n",
      " |-- PM_count: double (nullable = false)\n",
      " |-- AM_count: double (nullable = false)\n",
      " |-- first_half_month: double (nullable = false)\n",
      " |-- second_half_month: double (nullable = false)\n",
      " |-- avg_song_length: double (nullable = true)\n",
      " |-- longest_sess: double (nullable = true)\n",
      " |-- next_song_count: double (nullable = false)\n",
      " |-- thumbs_up_count: double (nullable = false)\n",
      " |-- thumbs_down_count: double (nullable = false)\n",
      " |-- playlist_added_count: double (nullable = false)\n",
      " |-- friend_added_count: double (nullable = false)\n",
      " |-- Downgrade_count: double (nullable = false)\n",
      " |-- home_click_count: double (nullable = false)\n",
      " |-- roll_advert_count: double (nullable = false)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Print Schema\n",
    "final_df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup pipeline\n",
    "features_t = {}\n",
    "features_pipe = {}\n",
    "def feature_setup(col, es):\n",
    "    pipe = Pipeline(stages=es)\n",
    "    features_pipe[col] = pipe.fit(final_df.select(final_df[col]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# String Indexing and One Hot Encoding of Features,along with Threading\n",
    "for col in cat_cols:\n",
    "    indexer = StringIndexer(inputCol=col, outputCol= col + '_index')\n",
    "    ohe_encoder = OneHotEncoder(dropLast=True, inputCol= col + '_index', outputCol=col+'_ohe')\n",
    "    features_t[col] = threading.Thread(target=feature_setup, args=[col, [indexer, ohe_encoder]])\n",
    "    features_t[col].start()\n",
    "    \n",
    "for col in cat_cols: \n",
    "    features_t[col].join()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a Vector Assembler of features and Scaling the features\n",
    "vector_inputs = [col + '_ohe' for col in cat_cols] + num_cols\n",
    "vector_assembler_features = VectorAssembler(inputCols=vector_inputs, outputCol='features_vector')\n",
    "scaler = StandardScaler(inputCol='features_vector', outputCol='features')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Transformation Pipeline i.e. applying previous steps on data\n",
    "feature_transformation = Pipeline(stages=list(features_pipe.values()) + \n",
    "                                  [vector_assembler_features,scaler]) \\\n",
    "            .fit(final_df.select(num_cols + cat_cols))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Label of features\n",
    "feature_labels = spark.sparkContext.parallelize( \\\n",
    "            [[col, m.stages[0].labels] for col, m in features_pipe.items()] \\\n",
    "            )\n",
    "feature_labels = spark.createDataFrame(feature_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_labels = feature_labels.withColumnRenamed('_1','Name_of_feature').withColumnRenamed('_2','Value_of_feature')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------+--------------------+\n",
      "|Name_of_feature|    Value_of_feature|\n",
      "+---------------+--------------------+\n",
      "|         gender|              [M, F]|\n",
      "|      user_city|[Los Angeles-Long...|\n",
      "|     user_state|[ CA,  TX,  NY-NJ...|\n",
      "+---------------+--------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "feature_labels.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def feature_transformation_fn(df, feature_transformation):\n",
    "    '''\n",
    "    INPUT:\n",
    "    df - (spark dataframe) Dataframe containing new engineered features\n",
    "    feature_transformation (pipeline) - Transformation pipeline\n",
    "    \n",
    "    OUTPUT:\n",
    "    final_transformed - (spark dataframe) Transformed spark dataframe\n",
    "    '''\n",
    "    feature_labels = {}\n",
    "    for stage in feature_transformation.stages:\n",
    "        if isinstance(stage, PipelineModel) and len(stage.stages) > 0:\n",
    "            stageInner = stage.stages[0]\n",
    "            if isinstance(stageInner, StringIndexerModel):\n",
    "                inputCol = stageInner.extractParamMap()[stageInner.getParam('inputCol')]\n",
    "                ip_labels = stageInner.labels\n",
    "                outputCol = stageInner.extractParamMap()[stageInner.getParam('outputCol')]\n",
    "                feature_labels[inputCol]=ip_labels\n",
    "\n",
    "    if len(feature_labels) > 0:\n",
    "        def not_seen(labels):\n",
    "            return f.udf(lambda col_value: col_value if col_value in labels else labels[0])\n",
    "\n",
    "        not_seen_l = {}\n",
    "        for col in df.columns:\n",
    "            if col in num_cols: \n",
    "                not_seen_l[col] = df[col]\n",
    "            elif col in cat_cols: \n",
    "                not_seen_l[col] = not_seen(feature_labels[col])(df[col]).alias(col)\n",
    "        n_unseen = df.select(id_cols + list(not_seen_l.values()) + ['Churn'])\n",
    "    else:\n",
    "        n_unseen = df\n",
    "\n",
    "    # Transform data\n",
    "    final_transformed = feature_transformation.transform(n_unseen)\n",
    "\n",
    "    return final_transformed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the transformed dataframe\n",
    "transformed_df = feature_transformation_fn(final_df, feature_transformation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Split the data into train, validation and test set in the ratio 0.8:0.1:0.1\n",
    "train_df, validation_df, test_df = transformed_df.randomSplit([0.8,0.1,0.1], 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ALGO 1: RANDOM FORSEST CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining Random Forest Classifier\n",
    "rfc_classifier = RandomForestClassifier(maxDepth=3, labelCol='Churn', featuresCol='features', seed=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting up the parameter grid and Evaluator\n",
    "param_grid = ParamGridBuilder() \\\n",
    "        .addGrid(rfc_classifier.numTrees,[3,4,5]) \\\n",
    "        .addGrid(rfc_classifier.maxDepth, [4,5,6]) \\\n",
    "        .addGrid(rfc_classifier.maxBins, [5,6,7]) \\\n",
    "        .build()\n",
    "\n",
    "evaluator = BinaryClassificationEvaluator( \\\n",
    "          rawPredictionCol = \"prediction\"\n",
    "          ,labelCol = 'Churn' \\\n",
    "          ,metricName = 'areaUnderROC')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting up the cross validator\n",
    "cross_validator = CrossValidator( \\\n",
    "          estimatorParamMaps = param_grid \\\n",
    "          ,estimator = rfc_classifier \\\n",
    "          ,evaluator = evaluator \\\n",
    "          ,numFolds = 4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run the cross validated pipeline and choose the best model\n",
    "pipeline_model = Pipeline(stages=[cross_validator]).fit(train_df)\n",
    "cv_model = pipeline_model.stages[0]\n",
    "model = cv_model.bestModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Number of Trees  Max Depth  Max Bins\n",
      "0                4          5         6\n"
     ]
    }
   ],
   "source": [
    "# Print Optimal Parameters\n",
    "optimal_params = pd.DataFrame({\n",
    "          'Number of Trees': [model.getNumTrees]\n",
    "          ,'Max Depth': [model.getMaxDepth()]\n",
    "          ,'Max Bins': [model.getMaxBins()]\n",
    "          })\n",
    "print(optimal_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "def metric_fn(df, model, data_type):\n",
    "    '''\n",
    "    INPUT:\n",
    "    df - (spark dataframe) input dataframe for which we need metrics\n",
    "    model - (model) The actual trained model\n",
    "    data_type - (text) Can be Train, Validation, Test wtc.\n",
    "    \n",
    "    OUTPUT:\n",
    "    none\n",
    "    '''\n",
    "    transformed_df = model.transform(df)\n",
    "    results = transformed_df.select(['prediction', 'Churn'])\n",
    "    predictionAndLabels=results.rdd\n",
    "    metrics = MulticlassMetrics(predictionAndLabels)\n",
    "    cm=metrics.confusionMatrix().toArray()\n",
    "    accuracy=(cm[0][0]+cm[1][1])/cm.sum()\n",
    "    precision=(cm[0][0])/(cm[0][0]+cm[1][0])\n",
    "    recall=(cm[0][0])/(cm[0][0]+cm[0][1])\n",
    "    f1_s = (2 * precision * recall)/(precision + recall)\n",
    "    print(data_type + ' METRICS')\n",
    "    print('Confusion Matrix: \\n',cm )\n",
    "    print('Area under ROC:' ,evaluator.evaluate(transformed_df, {evaluator.metricName: \"areaUnderROC\"}))\n",
    "    print('Accuracy: ',accuracy)\n",
    "    print('Precision: ',precision)\n",
    "    print('Recall: ',recall)\n",
    "    print('F1 Score: ',f1_s)\n",
    "    #return cm, accuracy, precision, recall, f1_s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRAIN METRICS\n",
      "Confusion Matrix: \n",
      " [[285.   0.]\n",
      " [ 67.  13.]]\n",
      "Area under ROC: 0.58125\n",
      "Accuracy:  0.8164383561643835\n",
      "Precision:  0.8096590909090909\n",
      "Recall:  1.0\n",
      "F1 Score:  0.8948194662480378\n"
     ]
    }
   ],
   "source": [
    "# Metrics on Training Set\n",
    "metric_fn(train_df, model, 'TRAIN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VALIDATION METRICS\n",
      "Confusion Matrix: \n",
      " [[28.  4.]\n",
      " [12.  0.]]\n",
      "Area under ROC: 0.4375\n",
      "Accuracy:  0.6363636363636364\n",
      "Precision:  0.7\n",
      "Recall:  0.875\n",
      "F1 Score:  0.7777777777777777\n"
     ]
    }
   ],
   "source": [
    "# Metrics on Validation Set\n",
    "metric_fn(validation_df, model, 'VALIDATION')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TEST METRICS\n",
      "Confusion Matrix: \n",
      " [[32.  0.]\n",
      " [ 7.  0.]]\n",
      "Area under ROC: 0.5\n",
      "Accuracy:  0.8205128205128205\n",
      "Precision:  0.8205128205128205\n",
      "Recall:  1.0\n",
      "F1 Score:  0.9014084507042254\n"
     ]
    }
   ],
   "source": [
    "# Metrics on Test Set\n",
    "metric_fn(test_df, model, 'TEST')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ALGO 2: DECISION TREE CLASSIFIER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defining Decision Tree Classifier\n",
    "from pyspark.ml.classification import DecisionTreeClassifier\n",
    "dc_classifier = DecisionTreeClassifier(maxDepth=3, labelCol='Churn', featuresCol='features', seed=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting up the parameter grid and Evaluator\n",
    "param_grid_2 = ParamGridBuilder() \\\n",
    "        .addGrid(dc_classifier.maxDepth, [3,4,5]) \\\n",
    "        .addGrid(dc_classifier.maxBins, [30,40,50]) \\\n",
    "        .build()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting up the cross validator\n",
    "cross_validator_2 = CrossValidator( \\\n",
    "          estimatorParamMaps = param_grid_2 \\\n",
    "          ,estimator = dc_classifier \\\n",
    "          ,evaluator = evaluator \\\n",
    "          ,numFolds = 4 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run the cross validated pipeline and choose the best model\n",
    "pipeline_model_2 = Pipeline(stages=[cross_validator_2]).fit(train_df)\n",
    "cv_model_2 = pipeline_model_2.stages[0]\n",
    "model_2 = cv_model_2.bestModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Max Depth  Max Bins\n",
      "0          5        30\n"
     ]
    }
   ],
   "source": [
    "# Print Optimal Parameters\n",
    "optimal_params_2 = pd.DataFrame({\n",
    "          'Max Depth': [model_2.getMaxDepth()]\n",
    "          ,'Max Bins': [model_2.getMaxBins()]\n",
    "          })\n",
    "print(optimal_params_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TRAIN METRICS\n",
      "Confusion Matrix: \n",
      " [[284.   1.]\n",
      " [ 51.  29.]]\n",
      "Area under ROC: 0.6794956140350877\n",
      "Accuracy:  0.8575342465753425\n",
      "Precision:  0.8477611940298507\n",
      "Recall:  0.9964912280701754\n",
      "F1 Score:  0.9161290322580646\n"
     ]
    }
   ],
   "source": [
    "# Metrics on Training Set\n",
    "metric_fn(train_df, model_2, 'TRAIN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "VALIDATION METRICS\n",
      "Confusion Matrix: \n",
      " [[30.  2.]\n",
      " [12.  0.]]\n",
      "Area under ROC: 0.46875\n",
      "Accuracy:  0.6818181818181818\n",
      "Precision:  0.7142857142857143\n",
      "Recall:  0.9375\n",
      "F1 Score:  0.8108108108108109\n"
     ]
    }
   ],
   "source": [
    "# Metrics on Validation Set\n",
    "metric_fn(validation_df, model_2, 'VALIDATION')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TEST METRICS\n",
      "Confusion Matrix: \n",
      " [[30.  2.]\n",
      " [ 6.  1.]]\n",
      "Area under ROC: 0.5401785714285714\n",
      "Accuracy:  0.7948717948717948\n",
      "Precision:  0.8333333333333334\n",
      "Recall:  0.9375\n",
      "F1 Score:  0.8823529411764706\n"
     ]
    }
   ],
   "source": [
    "# Metrics on Test Set\n",
    "metric_fn(test_df, model_2, 'TEST')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Steps\n",
    "Clean up your code, adding comments and renaming variables to make the code easier to read and maintain. Refer to the Spark Project Overview page and Data Scientist Capstone Project Rubric to make sure you are including all components of the capstone project and meet all expectations. Remember, this includes thorough documentation in a README file in a Github repository, as well as a web app or blog post."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
